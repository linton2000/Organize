# Compose file for local testing purposes
name: ${COMPOSE_PROJECT_NAME}

services:
  # React Client
  web:
    build:
      context: ${WEB_DIR_PATH}
      dockerfile: Containerfile
    ports:
      - 3000:3000
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}
      - HOST=${HOST}
      - CHOKIDAR_USEPOLLING=${CHOKIDAR_USEPOLLING}
      - WATCHPACK_POLLING=${WATCHPACK_POLLING}
      - WDS_SOCKET_PORT=${WDS_SOCKET_PORT}
    depends_on:
      - api
    volumes:
      - ${WEB_DIR_PATH}/src:/app/src
      - ${WEB_DIR_PATH}/public:/app/public

  # Django API
  api:
    restart: on-failure
    build:
      context: ${API_DIR_PATH}
      dockerfile: Containerfile
    ports:
      - 8000:8000
    environment:      
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - PYTHONDONTWRITEBYTECODE=${PYTHONDONTWRITEBYTECODE}
      - PYTHONUNBUFFERED=${PYTHONUNBUFFERED}
      - DB_HOST=db
      - DB_PORT=5432
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ${API_DIR_PATH}/src:/app

  # Postgres DB
  db:
    restart: unless-stopped
    image: postgres:16
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data: